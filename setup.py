#!/usr/bin/env python3
"""
eBird Weather Mapper Setup Script
This script helps configure your extension and weather website setup.
"""

import os
import json
import sys
from pathlib import Path

def print_header():
    print("""
🌤️  eBird Weather Mapper Setup
=====================================
This script will help you configure your eBird Weather Mapper extension
to securely hide your API key and set up the standalone weather website.
""")

def check_requirements():
    """Check if required directories and files exist"""
    print("📋 Checking requirements...")
    
    # Check for Chrome extension files
    required_files = [
        'manifest.json',
        'checklist-wind-map.js',
        'python/herbie_server.py',
        'python/herbie_datagrab.py'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print("❌ Missing required files:")
        for file in missing_files:
            print(f"   - {file}")
        print("\nPlease make sure you're running this from your Chrome_Extension directory.")
        return False
    else:
        print("✅ All required files found!")
        return True

def get_ebird_api_key():
    """Get eBird API key from user"""
    print("\n🔑 eBird API Key Configuration")
    print("Your eBird API key is needed to fetch checklist data securely.")
    print("Get your key from: https://ebird.org/api/keygen")
    
    current_key = os.getenv('EBIRD_API_KEY')
    if current_key:
        print(f"Current key found: {current_key[:8]}...")
        use_current = input("Use current key? (y/n): ").lower().strip()
        if use_current == 'y':
            return current_key
    
    while True:
        api_key = input("Enter your eBird API key: ").strip()
        if len(api_key) < 10:
            print("❌ API key seems too short. Please check and try again.")
            continue
        
        confirm = input(f"Confirm API key: {api_key[:8]}...? (y/n): ").lower().strip()
        if confirm == 'y':
            return api_key

def get_weather_site_url():
    """Get weather website URL"""
    print("\n🌐 Weather Website Configuration")
    print("Where will you host your standalone weather website?")
    print("Examples:")
    print("  - https://your-weather-site.com")
    print("  - https://username.github.io/weather")
    print("  - https://weather-app.netlify.app")
    
    while True:
        url = input("Enter your weather website URL: ").strip()
        if not url.startswith('http'):
            url = 'https://' + url
        
        print(f"Weather site URL: {url}")
        confirm = input("Is this correct? (y/n): ").lower().strip()
        if confirm == 'y':
            return url

def create_env_file(api_key, weather_url):
    """Create .env file with configuration"""
    print("\n📝 Creating configuration files...")
    
    env_content = f"""# eBird Weather Mapper Configuration
# Generated by setup.py

# eBird API Key (Required)
EBIRD_API_KEY={api_key}

# Weather Website URL (Required)
WEATHER_SITE_URL={weather_url}

# Server Configuration
NODE_ENV=development
PORT=8000

# Optional: Additional weather services
# OPENWEATHER_API_KEY=your_openweather_key_here
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("✅ Created .env file")

def update_herbie_server(api_key):
    """Update herbie_server.py to use environment variables"""
    server_file = 'python/herbie_server.py'
    
    # Read current content
    with open(server_file, 'r') as f:
        content = f.read()
    
    # Check if it already has the enhanced version
    if 'ebird_proxy' in content:
        print("✅ herbie_server.py already updated")
        return
    
    # Backup original
    backup_file = 'python/herbie_server.py.backup'
    with open(backup_file, 'w') as f:
        f.write(content)
    
    print(f"📁 Created backup: {backup_file}")
    print("⚠️  You'll need to manually update herbie_server.py with the enhanced version from the provided code.")

def update_extension_files(weather_url):
    """Update extension files with weather site URL"""
    print("🔧 Updating extension files...")
    
    # Update checklist-wind-map.js
    script_file = 'checklist-wind-map.js'
    
    if os.path.exists(script_file):
        with open(script_file, 'r') as f:
            content = f.read()
        
        # Replace the placeholder URL
        content = content.replace(
            "const WEATHER_SITE_URL = 'https://your-weather-site.com';",
            f"const WEATHER_SITE_URL = '{weather_url}';"
        )
        
        # Backup original
        backup_file = 'checklist-wind-map.js.backup'
        with open(backup_file, 'w') as f:
            with open(script_file, 'r') as orig:
                f.write(orig.read())
        
        with open(script_file, 'w') as f:
            f.write(content)
        
        print(f"✅ Updated {script_file}")
        print(f"📁 Created backup: {backup_file}")
    else:
        print(f"⚠️  {script_file} not found - you'll need to update it manually")

def create_gitignore():
    """Create/update .gitignore file"""
    gitignore_content = """# API Keys and Secrets - NEVER COMMIT THESE
.env
.env.local
.env.production
*.key
config.js

# Backup files
*.backup

# Build outputs
dist/
build/
*.zip

# Dependencies
node_modules/
__pycache__/
*.pyc

# IDE files
.vscode/
.idea/
*.swp

# OS files
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Data cache
data/
"""
    
    with open('.gitignore', 'w') as f:
        f.write(gitignore_content)
    
    print("✅ Created .gitignore file")

def create_start_script():
    """Create a start script for easy server launch"""
    start_script_content = """#!/bin/bash
# Start script for eBird Weather Mapper

echo "🌤️  Starting eBird Weather Mapper Server..."

# Load environment variables
if [ -f .env ]; then
    export $(cat .env | grep -v '#' | xargs)
    echo "✅ Loaded environment variables"
else
    echo "❌ .env file not found! Run setup.py first."
    exit 1
fi

# Check if API key is set
if [ -z "$EBIRD_API_KEY" ]; then
    echo "❌ EBIRD_API_KEY not set in .env file"
    exit 1
fi

echo "📡 eBird API Key: ✅ Configured"
echo "🌐 Weather Site URL: $WEATHER_SITE_URL"
echo "🚀 Starting server on port $PORT..."

cd python
python herbie_server.py
"""
    
    with open('start_server.sh', 'w') as f:
        f.write(start_script_content)
    
    os.chmod('start_server.sh', 0o755)  # Make executable
    print("✅ Created start_server.sh script")

def print_next_steps(api_key, weather_url):
    """Print next steps for user"""
    print(f"""
🎉 Setup Complete!
==================

Your configuration:
📍 Weather Site URL: {weather_url}
🔑 eBird API Key: {api_key[:8]}... (stored in .env)

Next Steps:
-----------

1. 🖥️  Deploy your weather website:
   - Upload the weather website HTML to {weather_url}
   - Make sure it's accessible at the URL you specified

2. 🔧 Update your herbie_server.py:
   - Replace your current server with the enhanced version provided
   - This adds eBird API proxy endpoints for security

3. 🚀 Start your enhanced server:
   chmod +x start_server.sh
   ./start_server.sh
   
   Or manually:
   cd python && python herbie_server.py

4. 🌐 Test the extension:
   - Go to an eBird checklist page
   - Click the extension button
   - Try both "Launch Weather Map" and "Show Here" options

5. 🔒 Security Notes:
   - Your .env file contains your API key - never commit it to git!
   - The .gitignore file has been configured to protect sensitive files
   - All eBird API calls now go through your secure server

Files created/updated:
----------------------
✅ .env (your API key and config)
✅ .gitignore (protects sensitive files)  
✅ start_server.sh (easy server startup)
📁 *.backup files (your originals)

Troubleshooting:
---------------
- Server won't start? Check that your .env file has EBIRD_API_KEY set
- Extension not working? Make sure your weather site URL is correct
- Weather data not loading? Verify your Herbie setup and data directory

Happy birding and weather mapping! 🦅🌤️
""")

def main():
    """Main setup function"""
    print_header()
    
    # Check requirements
    if not check_requirements():
        sys.exit(1)
    
    # Get configuration from user
    api_key = get_ebird_api_key()
    weather_url = get_weather_site_url()
    
    # Create configuration files
    create_env_file(api_key, weather_url)
    create_gitignore()
    create_start_script()
    
    # Update extension files
    update_extension_files(weather_url)
    update_herbie_server(api_key)
    
    # Show next steps
    print_next_steps(api_key, weather_url)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n❌ Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Setup failed: {e}")
        sys.exit(1)